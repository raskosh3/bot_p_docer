from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
import logging

from keyboards import get_cart_keyboard, get_main_keyboard
from database import Database
from config import Config

router = Router()
db = Database()
logger = logging.getLogger(__name__)


@router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: Message):
    cart_items = db.get_user_cart(message.from_user.id)

    if not cart_items:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", reply_markup=get_main_keyboard())
        return

    total = 0
    cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"

    for item in cart_items:
        item_total = item['price'] * item['quantity']
        total += item_total
        cart_text += f"‚Ä¢ {item['name']}\n"
        cart_text += f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']} x {item['price']} —Ä—É–±. = {item_total} —Ä—É–±.\n\n"

    cart_text += f"üí∞ –ò—Ç–æ–≥–æ: {total} —Ä—É–±."

    await message.answer(cart_text, reply_markup=get_cart_keyboard(cart_items))


@router.callback_query(F.data.startswith("add_to_cart_"))
async def add_to_cart(callback: CallbackQuery):
    try:
        logger.info(f"Callback data: {callback.data}")

        # –†–∞–∑–±–∏—Ä–∞–µ–º callback data
        parts = callback.data.split("_")
        logger.info(f"Parts: {parts}")

        # –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: add_to_cart_–∫–∞—Ç–µ–≥–æ—Ä–∏—è_–ø—Ä–æ–¥—É–∫—Ç
        if len(parts) < 4:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return

        category = parts[3]
        product_key = parts[4] if len(parts) > 4 else parts[3]

        logger.info(f"Category: {category}, Product key: {product_key}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø—Ä–æ–¥—É–∫—Ç–∞
        if category not in Config.PRODUCTS:
            await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        if product_key not in Config.PRODUCTS[category]:
            await callback.answer("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
        product_info = Config.PRODUCTS[category][product_key]
        logger.info(f"Product info: {product_info}")

        product_data = {
            'category': category,
            'product_key': product_key,
            'name': product_info['name'],
            'price': product_info['price'],
            'quantity': 1
        }

        db.add_to_cart(callback.from_user.id, product_data)
        await callback.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", show_alert=True)


@router.callback_query(F.data.startswith("remove_"))
async def remove_from_cart(callback: CallbackQuery):
    try:
        parts = callback.data.split("_")
        if len(parts) < 3:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return

        category = parts[1]
        product_key = parts[2]

        db.remove_from_cart(callback.from_user.id, product_key, category)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
        cart_items = db.get_user_cart(callback.from_user.id)

        if not cart_items:
            await callback.message.edit_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            await callback.answer("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
            return

        total = 0
        cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"

        for item in cart_items:
            item_total = item['price'] * item['quantity']
            total += item_total
            cart_text += f"‚Ä¢ {item['name']}\n"
            cart_text += f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']} x {item['price']} —Ä—É–±. = {item_total} —Ä—É–±.\n\n"

        cart_text += f"üí∞ –ò—Ç–æ–≥–æ: {total} —Ä—É–±."

        await callback.message.edit_text(cart_text, reply_markup=get_cart_keyboard(cart_items))
        await callback.answer("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞", show_alert=True)


@router.callback_query(F.data == "clear_cart")
async def clear_cart(callback: CallbackQuery):
    try:
        db.clear_cart(callback.from_user.id)
        await callback.message.edit_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
        await callback.answer("‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã", show_alert=True)